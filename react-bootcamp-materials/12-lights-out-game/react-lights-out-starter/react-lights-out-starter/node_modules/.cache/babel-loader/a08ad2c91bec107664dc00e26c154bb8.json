{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\carlo\\\\Documents\\\\React\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\carlo\\\\Documents\\\\React\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\carlo\\\\Documents\\\\React\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\carlo\\\\Documents\\\\React\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\carlo\\\\Documents\\\\React\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\carlo\\\\Documents\\\\React\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; this.props.nrows > y; y++) {\n        var array = [];\n\n        for (var x = 0; this.props.ncols > x; x++) {\n          array.push(Math.random() < this.props.changeLightStartsOn ? true : false);\n        }\n\n        board.push(array);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tblBoard = [];\n\n      for (var y = 0; this.props.nrows > y; y++) {\n        console.log(\"C\");\n        var row = [];\n\n        for (var x = 0; this.props.ncols > x; x++) {\n          row.push(React.createElement(Cell, {\n            isLit: this.state.board[y][x],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }));\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, tblBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  changeLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["C:\\Users\\carlo\\Documents\\React\\react-bootcamp-materials\\12-lights-out-game\\react-lights-out-starter\\react-lights-out-starter\\src\\Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","array","x","ncols","push","Math","random","changeLightStartsOn","tblBoard","console","log","row","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb,CAFiB,CAOjB;;AAPiB;AAQlB;AAED;;;;;kCAEc;AACZ,UAAID,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIE,CAAC,GAAC,CAAX,EAAc,KAAKL,KAAL,CAAWM,KAAX,GAAmBD,CAAjC,EAAoCA,CAAC,EAArC,EAAyC;AACvC,YAAIE,KAAK,GAAG,EAAZ;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgB,KAAKR,KAAL,CAAWS,KAAX,GAAmBD,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzCD,UAAAA,KAAK,CAACG,IAAN,CAAWC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAA3B,GAAgD,IAAhD,GAAsD,KAAjE;AACD;;AACDV,QAAAA,KAAK,CAACO,IAAN,CAAWH,KAAX;AACD;;AAED,aAAOJ,KAAP;AACD;AAED;;AAIA;;;;6BAES;AACP,UAAIW,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgB,KAAKL,KAAL,CAAWM,KAAX,GAAmBD,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzCU,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,YAAIC,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIT,CAAC,GAAG,CAAb,EAAgB,KAAKR,KAAL,CAAWS,KAAX,GAAmBD,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzCS,UAAAA,GAAG,CAACP,IAAJ,CACE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE,KAAKT,KAAL,CAAWE,KAAX,CAAiBE,CAAjB,EAAoBG,CAApB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AACDM,QAAAA,QAAQ,CAACJ,IAAT,CAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKO,GAAL,CAAd;AAED;;AACD,aACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQH,QAAR,CADF,CADF;AAKD;;;;EAvDiBjB,S;;AAAdE,K,CACGmB,Y,GAAe;AACpBZ,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AA0DxB,eAAed,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    changeLightStartsOn: 0.25\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let y=0; this.props.nrows > y; y++) {\n      let array = [];\n      for (let x = 0; this.props.ncols > x; x++) {\n        array.push(Math.random() < this.props.changeLightStartsOn? true: false);\n      }\n      board.push(array);\n    }\n\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  \n\n  /** Render game board or winning message. */\n\n  render() {\n    let tblBoard = [];\n    for (let y = 0; this.props.nrows > y; y++) {\n      console.log(\"C\");\n      let row = [];\n      for (let x = 0; this.props.ncols > x; x++) {\n        row.push(\n          <Cell isLit={this.state.board[y][x]}/>\n        );\n      }\n      tblBoard.push(<tr>{row}</tr>);\n      \n    }\n    return (\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}